use crate::cli::{Args, StampMode};
use std::env;
use std::path::Path;
use std::process::Command;

/// Generator for provenance/stamp information
pub struct StampGenerator<'a> {
    args: &'a Args,
}

impl<'a> StampGenerator<'a> {
    /// Create a new stamp generator
    pub fn new(args: &'a Args) -> Self {
        Self { args }
    }

    /// Generate stamp based on modes
    pub fn generate(&self, target_path: &Path) -> Option<String> {
        if self.args.stamp.is_empty() || self.args.stamp.contains(&StampMode::None) {
            return None;
        }

        let mut stamps = Vec::new();

        for mode in &self.args.stamp {
            let stamp_text = match mode {
                StampMode::None => continue,
                StampMode::Version => self.generate_version(),
                StampMode::Date => self.generate_date(),
                StampMode::Commit => self.generate_commit(target_path),
            };
            stamps.push(stamp_text);
        }

        if stamps.is_empty() {
            None
        } else {
            Some(stamps.join("\n"))
        }
    }

    /// Generate version stamp
    fn generate_version(&self) -> String {
        format!("Generated by tree2md v{}", env!("CARGO_PKG_VERSION"))
    }

    /// Generate date stamp
    fn generate_date(&self) -> String {
        use std::time::SystemTime;

        let now = SystemTime::now()
            .duration_since(SystemTime::UNIX_EPOCH)
            .unwrap()
            .as_secs();

        // Simple date formatting without external deps
        format!("Generated at timestamp {}", now)
    }

    /// Generate commit stamp
    fn generate_commit(&self, target_path: &Path) -> String {
        // Try to get git commit info
        if let Some(git_info) = self.get_git_info(target_path) {
            format!("Generated from {}", git_info)
        } else {
            "Generated by tree2md (no git info available)".to_string()
        }
    }

    /// Get git information for the target directory
    fn get_git_info(&self, target_path: &Path) -> Option<String> {
        // Try to get git commit hash
        let output = Command::new("git")
            .arg("rev-parse")
            .arg("--short")
            .arg("HEAD")
            .current_dir(target_path)
            .output()
            .ok()?;

        if output.status.success() {
            let commit = String::from_utf8_lossy(&output.stdout).trim().to_string();

            // Try to get branch name
            let branch_output = Command::new("git")
                .arg("rev-parse")
                .arg("--abbrev-ref")
                .arg("HEAD")
                .current_dir(target_path)
                .output()
                .ok()?;

            if branch_output.status.success() {
                let branch = String::from_utf8_lossy(&branch_output.stdout)
                    .trim()
                    .to_string();
                return Some(format!("Git: {} ({})", commit, branch));
            } else {
                return Some(format!("Git: {}", commit));
            }
        }

        None
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::cli::Args;

    #[test]
    fn test_stamp_none() {
        use clap::Parser;
        let args = Args::parse_from(vec!["tree2md", ".", "--stamp", "none"]);
        let generator = StampGenerator::new(&args);
        let stamp = generator.generate(Path::new("."));
        assert!(stamp.is_none());
    }

    #[test]
    fn test_stamp_version() {
        use clap::Parser;
        let args = Args::parse_from(vec!["tree2md", ".", "--stamp", "version"]);
        let generator = StampGenerator::new(&args);
        let stamp = generator.generate(Path::new("."));
        assert!(stamp.is_some());
        let text = stamp.unwrap();
        assert!(text.contains("tree2md"));
        assert!(text.contains("v"));
    }

    #[test]
    fn test_stamp_date() {
        use clap::Parser;
        let args = Args::parse_from(vec!["tree2md", ".", "--stamp", "date"]);
        let generator = StampGenerator::new(&args);
        let stamp = generator.generate(Path::new("."));
        assert!(stamp.is_some());
        let text = stamp.unwrap();
        assert!(text.contains("Generated at"));
    }

    #[test]
    fn test_stamp_commit() {
        use clap::Parser;
        let args = Args::parse_from(vec!["tree2md", ".", "--stamp", "commit"]);
        let generator = StampGenerator::new(&args);
        let stamp = generator.generate(Path::new("."));
        assert!(stamp.is_some());
        let text = stamp.unwrap();
        assert!(text.contains("Generated"));
    }
}
